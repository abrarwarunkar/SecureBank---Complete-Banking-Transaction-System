[
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "c44bd217-ecb4-4fa2-9b85-e32e8005a03a",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC001-test_user_registration_api",
    "description": "Verify that the user registration endpoint /api/auth/register successfully registers a new user with valid input data and returns a valid JWT token.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nREGISTER_ENDPOINT = \"/api/auth/register\"\nTIMEOUT = 30\n\n\ndef test_user_registration_api():\n    url = BASE_URL + REGISTER_ENDPOINT\n    unique_str = str(uuid.uuid4()).replace(\"-\", \"\")[:8]\n    payload = {\n        \"username\": f\"testuser_{unique_str}\",\n        \"email\": f\"testuser_{unique_str}@example.com\",\n        \"password\": \"StrongPass!23\",\n        \"fullName\": \"Test User\",\n        \"phone\": \"+1234567890\"\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to register user failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    try:\n        resp_json = response.json()\n    except Exception as e:\n        assert False, f\"Response is not valid JSON: {e}\"\n\n    assert isinstance(resp_json, dict), \"Response JSON is not a dictionary\"\n    assert resp_json.get(\"success\") is True, f\"Expected success=True, got {resp_json.get('success')}\"\n    assert \"message\" in resp_json, \"Response JSON missing 'message'\"\n    assert \"data\" in resp_json and isinstance(resp_json[\"data\"], dict), \"Response JSON missing 'data' or 'data' is not an object\"\n    data = resp_json[\"data\"]\n    assert \"token\" in data and isinstance(data[\"token\"], str) and len(data[\"token\"]) > 0, \"JWT token missing or empty in response data\"\n    assert \"type\" in data and isinstance(data[\"type\"], str) and len(data[\"type\"]) > 0, \"Token type missing or empty in response data\"\n\n\ntest_user_registration_api()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.141Z",
    "modified": "2025-10-01T09:28:34.978Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "5f95e167-5365-4025-81b8-18583d05f958",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC002-test_user_login_api",
    "description": "Verify that the user login endpoint /api/auth/login authenticates a user with valid credentials and returns a valid JWT token.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_user_login_api():\n    register_url = f\"{BASE_URL}/api/auth/register\"\n    login_url = f\"{BASE_URL}/api/auth/login\"\n\n    # Create unique username/email using uuid to avoid conflict\n    unique_suffix = str(uuid.uuid4()).replace('-', '')[:8]\n    username = f\"user_{unique_suffix}\"\n    email = f\"{username}@test.com\"\n    password = \"TestPass123!\"\n\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    register_payload = {\n        \"username\": username,\n        \"email\": email,\n        \"password\": password,\n        \"fullName\": \"Test User\",\n        \"phone\": \"1234567890\"\n    }\n\n    # Register user first to ensure valid credentials for login\n    try:\n        reg_response = requests.post(register_url, json=register_payload, headers=headers, timeout=TIMEOUT)\n        assert reg_response.status_code == 200, f\"User registration failed with status code {reg_response.status_code}\"\n        reg_json = reg_response.json()\n        assert reg_json.get(\"success\") is True, f\"User registration not successful: {reg_json.get('message')}\"\n\n        # Now attempt to login with the registered credentials\n        login_payload = {\n            \"username\": username,\n            \"password\": password\n        }\n        login_response = requests.post(login_url, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert login_response.status_code == 200, f\"Login failed with status code {login_response.status_code}\"\n\n        login_json = login_response.json()\n        assert login_json.get(\"success\") is True, f\"Login not successful: {login_json.get('message')}\"\n        assert \"data\" in login_json and isinstance(login_json[\"data\"], dict), \"Login response missing 'data' object\"\n        token = login_json[\"data\"].get(\"token\")\n        token_type = login_json[\"data\"].get(\"type\")\n        assert token and isinstance(token, str) and len(token) > 0, \"JWT token not found or invalid\"\n        assert token_type and isinstance(token_type, str) and len(token_type) > 0, \"Token type not found or invalid\"\n    finally:\n        # Cleanup: if the API had a user delete endpoint, it would be called here.\n        # Since none documented, no cleanup step.\n\n        pass\n\ntest_user_login_api()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.148Z",
    "modified": "2025-10-01T09:28:52.350Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "e9183596-280f-4b4f-be2c-e28bd1f55513",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC003-test_get_current_user_api",
    "description": "Verify that the endpoint /api/auth/me returns the current authenticated user's details correctly.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_get_current_user_api():\n    # First, register a new user\n    register_url = f\"{BASE_URL}/api/auth/register\"\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    me_url = f\"{BASE_URL}/api/auth/me\"\n    user_data = {\n        \"username\": \"testuser_tc003\",\n        \"email\": \"testuser_tc003@example.com\",\n        \"password\": \"TestPassword123!\",\n        \"fullName\": \"Test User TC003\",\n        \"phone\": \"+1234567890\"\n    }\n    headers = {\"Content-Type\": \"application/json\"}\n\n    token = None\n    try:\n        # Register user\n        resp = requests.post(register_url, json=user_data, headers=headers, timeout=TIMEOUT)\n        assert resp.status_code == 200, f\"Registration failed with status {resp.status_code}\"\n        body = resp.json()\n        assert \"success\" in body and body[\"success\"] is True\n        assert \"data\" in body and \"token\" in body[\"data\"]\n        token = body[\"data\"][\"token\"]\n\n        # Login user to confirm and get fresh token (optional, but to confirm login)\n        login_data = {\n            \"username\": user_data[\"username\"],\n            \"password\": user_data[\"password\"]\n        }\n        resp_login = requests.post(login_url, json=login_data, headers=headers, timeout=TIMEOUT)\n        assert resp_login.status_code == 200, f\"Login failed with status {resp_login.status_code}\"\n        body_login = resp_login.json()\n        assert \"success\" in body_login and body_login[\"success\"] is True\n        assert \"data\" in body_login and \"token\" in body_login[\"data\"]\n        token = body_login[\"data\"][\"token\"]\n\n        # Use token to get current user info\n        auth_headers = {\n            \"Authorization\": f\"Bearer {token}\"\n        }\n        resp_me = requests.get(me_url, headers=auth_headers, timeout=TIMEOUT)\n        assert resp_me.status_code == 200, f\"Get current user failed with status {resp_me.status_code}\"\n        body_me = resp_me.json()\n        assert \"success\" in body_me and body_me[\"success\"] is True\n        assert \"data\" in body_me\n\n        user = body_me[\"data\"]\n        expected_fields = [\"id\", \"username\", \"email\", \"fullName\", \"phone\", \"role\", \"isVerified\", \"createdAt\"]\n        for field in expected_fields:\n            assert field in user, f\"Field '{field}' missing in user data\"\n\n        # Validate the returned username/email matches registered info\n        assert user[\"username\"] == user_data[\"username\"]\n        assert user[\"email\"] == user_data[\"email\"]\n        assert user[\"fullName\"] == user_data[\"fullName\"]\n        assert user[\"phone\"] == user_data[\"phone\"]\n        # Role and isVerified type checks\n        assert isinstance(user[\"role\"], str)\n        assert isinstance(user[\"isVerified\"], bool)\n\n    finally:\n        # Cleanup: if an admin endpoint existed to delete user, we would call it here\n        # As no such info present, omit cleanup\n        pass\n\ntest_get_current_user_api()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.154Z",
    "modified": "2025-10-01T09:28:41.276Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "dcd0cc26-b426-4edb-b4c1-0c157e1745fd",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC004-test_create_account_api",
    "description": "Verify that the account creation endpoint /api/accounts creates a new bank account with valid account type and currency, and returns the correct account details.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_create_account_api():\n    # First, register and login a user to get JWT token for authentication\n    register_url = f\"{BASE_URL}/api/auth/register\"\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    create_account_url = f\"{BASE_URL}/api/accounts\"\n    \n    username = f\"user_{uuid.uuid4().hex[:8]}\"\n    password = \"TestPass123!\"\n    email = f\"{username}@example.com\"\n    full_name = \"Test User\"\n    phone = \"1234567890\"\n    \n    headers = {\"Content-Type\": \"application/json\"}\n    \n    # Register user\n    register_payload = {\n        \"username\": username,\n        \"email\": email,\n        \"password\": password,\n        \"fullName\": full_name,\n        \"phone\": phone\n    }\n    try:\n        reg_resp = requests.post(register_url, json=register_payload, headers=headers, timeout=TIMEOUT)\n        assert reg_resp.status_code == 200, f\"Registration failed: {reg_resp.text}\"\n        reg_json = reg_resp.json()\n        assert reg_json.get(\"success\") is True, \"Registration success flag false\"\n        token = reg_json.get(\"data\", {}).get(\"token\")\n        assert token, \"Token not found in registration response\"\n    except Exception as e:\n        raise AssertionError(f\"User registration failed: {e}\")\n    \n    # Login user\n    login_payload = {\n        \"username\": username,\n        \"password\": password\n    }\n    try:\n        login_resp = requests.post(login_url, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_json = login_resp.json()\n        assert login_json.get(\"success\") is True, \"Login success flag false\"\n        token = login_json.get(\"data\", {}).get(\"token\")\n        assert token, \"Token not found in login response\"\n    except Exception as e:\n        raise AssertionError(f\"User login failed: {e}\")\n    \n    auth_headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {token}\"\n    }\n    \n    # Prepare payload for account creation\n    account_payload = {\n        \"accountType\": \"SAVINGS\",\n        \"currency\": \"USD\"\n    }\n    \n    account_id = None\n    try:\n        # Create account\n        resp = requests.post(create_account_url, json=account_payload, headers=auth_headers, timeout=TIMEOUT)\n        assert resp.status_code == 200, f\"Account creation failed: {resp.text}\"\n        resp_json = resp.json()\n        assert resp_json.get(\"success\") is True, \"Account creation success flag false\"\n        data = resp_json.get(\"data\")\n        assert data, \"No data in account creation response\"\n        \n        # Validate mandatory returned fields\n        account_id = data.get(\"id\")\n        assert isinstance(account_id, int), \"Account ID missing or not int\"\n        assert isinstance(data.get(\"accountNumber\"), str) and data.get(\"accountNumber\"), \"Account number invalid\"\n        assert data.get(\"accountType\") == account_payload[\"accountType\"], \"Account type mismatch\"\n        assert isinstance(data.get(\"balance\"), (int, float)), \"Balance missing or invalid type\"\n        assert str(data.get(\"currency\")).upper() == account_payload[\"currency\"], \"Currency mismatch\"\n        assert isinstance(data.get(\"status\"), str) and data.get(\"status\"), \"Status missing or invalid\"\n        assert isinstance(data.get(\"createdAt\"), str) and data.get(\"createdAt\"), \"CreatedAt missing or invalid\"\n    finally:\n        # Clean up: delete the created account if API for deletion existed\n        # The PRD does not specify account deletion endpoint so skip this step.\n        pass\n\ntest_create_account_api()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 89, in <module>\n  File \"<string>\", line 81, in test_create_account_api\nAssertionError: Currency mismatch\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.159Z",
    "modified": "2025-10-01T09:29:50.201Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "52e378eb-5e72-4855-8b06-e5146dfa8c21",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC005-test_get_accounts_api",
    "description": "Verify that the endpoint /api/accounts returns a list of accounts belonging to the authenticated user.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_get_accounts_api():\n    # Use unique username to avoid conflicts\n    unique_suffix = uuid.uuid4().hex[:8]\n    username = f\"testuser_{unique_suffix}\"\n    email = f\"{username}@example.com\"\n    password = \"SecurePass123!\"\n    full_name = \"Test User\"\n    phone = \"1234567890\"\n    \n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    \n    token = None\n    created_account_id = None\n    \n    try:\n        # Register user\n        register_payload = {\n            \"username\": username,\n            \"email\": email,\n            \"password\": password,\n            \"fullName\": full_name,\n            \"phone\": phone\n        }\n        reg_resp = requests.post(\n            f\"{BASE_URL}/api/auth/register\",\n            json=register_payload,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert reg_resp.status_code == 200, f\"Register failed: {reg_resp.text}\"\n        reg_json = reg_resp.json()\n        assert reg_json.get(\"success\") is True\n        assert \"token\" in reg_json.get(\"data\", {})\n        token = reg_json[\"data\"][\"token\"]\n        \n        auth_headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {token}\"\n        }\n        \n        # Create an account for this user (needed to have accounts to get)\n        create_account_payload = {\n            \"accountType\": \"SAVINGS\",\n            \"currency\": \"USD\"\n        }\n        create_resp = requests.post(\n            f\"{BASE_URL}/api/accounts\",\n            json=create_account_payload,\n            headers=auth_headers,\n            timeout=TIMEOUT\n        )\n        assert create_resp.status_code == 200, f\"Account creation failed: {create_resp.text}\"\n        create_json = create_resp.json()\n        assert create_json.get(\"success\") is True\n        assert \"data\" in create_json and isinstance(create_json[\"data\"], dict)\n        created_account_id = create_json[\"data\"].get(\"id\")\n        assert created_account_id is not None\n        \n        # Call GET /api/accounts to retrieve accounts list\n        get_resp = requests.get(\n            f\"{BASE_URL}/api/accounts\",\n            headers=auth_headers,\n            timeout=TIMEOUT\n        )\n        assert get_resp.status_code == 200, f\"GET /api/accounts failed: {get_resp.text}\"\n        get_json = get_resp.json()\n        assert get_json.get(\"success\") is True\n        accounts = get_json.get(\"data\")\n        assert isinstance(accounts, list), \"Data is not a list\"\n        \n        # Verify that the created account is in the list\n        account_ids = [account.get(\"id\") for account in accounts if isinstance(account, dict)]\n        assert created_account_id in account_ids, \"Created account not found in accounts list\"\n        \n    finally:\n        # Cleanup: delete the created account if applicable\n        if token and created_account_id:\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/accounts/{created_account_id}\",\n                    headers={\"Authorization\": f\"Bearer {token}\"},\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n\ntest_get_accounts_api()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.164Z",
    "modified": "2025-10-01T09:28:48.582Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "5b6cfb2d-b78b-42d6-9d98-88501ba499b6",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC006-test_get_account_by_id_api",
    "description": "Verify that the endpoint /api/accounts/{id} returns the correct account details for a valid account ID.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\n# Helper function to register a user\n# Using a fixed test user data consistent with the PRD requirements\n\ndef register_test_user():\n    register_url = f\"{BASE_URL}/api/auth/register\"\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = {\n        \"username\": \"testuser\",\n        \"email\": \"testuser@example.com\",\n        \"password\": \"testpass\",\n        \"fullName\": \"Test User\",\n        \"phone\": \"1234567890\"\n    }\n    response = requests.post(register_url, headers=headers, json=payload, timeout=TIMEOUT)\n    if response.status_code == 200:\n        resp_json = response.json()\n        # If already registered or success, no error\n        if resp_json.get(\"success\") is True or \"User already exists\" in resp_json.get(\"message\", \"\"):\n            return\n    # If error, raise assertion\n    assert response.status_code == 200, f\"User registration failed with status {response.status_code}\"\n    resp_json = response.json()\n    assert resp_json.get(\"success\") is True, f\"User registration failed: {resp_json.get('message')}\"\n\n# Helper function to login and get JWT token\n# Assumption: a valid user \"testuser\" with password \"testpass\" exists in the system for testing\n# If not, register first\n\ndef get_auth_token():\n    # Register user first to ensure existence\n    register_test_user()\n\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = {\n        \"username\": \"testuser\",\n        \"password\": \"testpass\"\n    }\n    response = requests.post(login_url, headers=headers, json=payload, timeout=TIMEOUT)\n    assert response.status_code == 200, f\"Login failed with status {response.status_code}\"\n    resp_json = response.json()\n    assert resp_json.get(\"success\") is True, \"Login success flag not true\"\n    data = resp_json.get(\"data\")\n    assert data is not None, \"Login data missing\"\n    token = data.get(\"token\")\n    assert token is not None and isinstance(token, str), \"Token missing or invalid in login response\"\n    return token\n\n\ndef test_get_account_by_id_api():\n    \"\"\"\n    Verify that the endpoint /api/accounts/{id} returns the correct account details for a valid account ID.\n    Since the resource ID is not provided, create a new account, then get it by ID, then finally delete the account.\n    \"\"\"\n\n    create_url = f\"{BASE_URL}/api/accounts\"\n    get_url_template = f\"{BASE_URL}/api/accounts/{{}}\"\n\n    token = get_auth_token()\n\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {token}\"\n    }\n\n    # Sample valid payload for account creation - choose savings and USD as example\n    create_payload = {\n        \"accountType\": \"savings\",\n        \"currency\": \"USD\"\n    }\n\n    account_id = None\n\n    try:\n        # Create a new account\n        response = requests.post(create_url, headers=headers, json=create_payload, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Account creation failed with status {response.status_code}\"\n        resp_json = response.json()\n        assert resp_json.get(\"success\") is True, \"Account creation success flag not true\"\n        data = resp_json.get(\"data\")\n        assert data is not None, \"Account creation data missing\"\n        account_id = data.get(\"id\")\n        assert isinstance(account_id, int), \"Account ID is not an integer\"\n        # Validate key fields in created account data\n        assert data.get(\"accountType\") == create_payload[\"accountType\"], \"Account type mismatch on creation\"\n        assert data.get(\"currency\") == create_payload[\"currency\"], \"Currency mismatch on creation\"\n        assert \"accountNumber\" in data and isinstance(data[\"accountNumber\"], str), \"Missing or invalid accountNumber\"\n        assert \"balance\" in data and isinstance(data[\"balance\"], (int, float)), \"Missing or invalid balance\"\n        assert \"status\" in data and isinstance(data[\"status\"], str), \"Missing or invalid status\"\n        assert \"createdAt\" in data and isinstance(data[\"createdAt\"], str), \"Missing or invalid createdAt\"\n\n        # Get account by ID\n        get_url = get_url_template.format(account_id)\n        get_response = requests.get(get_url, headers=headers, timeout=TIMEOUT)\n        assert get_response.status_code == 200, f\"Get account by ID failed with status {get_response.status_code}\"\n        get_resp_json = get_response.json()\n        assert get_resp_json.get(\"success\") is True, \"Get account by ID success flag not true\"\n        get_data = get_resp_json.get(\"data\")\n        assert get_data is not None, \"Get account by ID data missing\"\n        # Validate returned data matches created account\n        assert get_data.get(\"id\") == account_id, \"Account ID mismatch\"\n        assert get_data.get(\"accountType\") == create_payload[\"accountType\"], \"Account type mismatch\"\n        assert get_data.get(\"currency\") == create_payload[\"currency\"], \"Currency mismatch\"\n        assert get_data.get(\"accountNumber\") == data[\"accountNumber\"], \"Account number mismatch\"\n        assert isinstance(get_data.get(\"balance\"), (int, float)), \"Invalid balance type\"\n        assert isinstance(get_data.get(\"status\"), str), \"Invalid status type\"\n        assert isinstance(get_data.get(\"createdAt\"), str), \"Invalid createdAt type\"\n\n    finally:\n        # Cleanup: No explicit account deletion endpoint given in PRD, so skipping delete attempt\n        pass\n\n\ntest_get_account_by_id_api()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 119, in <module>\n  File \"<string>\", line 82, in test_get_account_by_id_api\nAssertionError: Account creation failed with status 400\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.172Z",
    "modified": "2025-10-01T09:30:06.210Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "ebd8bb17-f4f4-4312-be49-d20d19268cac",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC007-test_get_account_balance_api",
    "description": "Verify that the endpoint /api/accounts/{id}/balance returns the correct balance for the specified account ID.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_get_account_balance_api():\n    # To test the balance endpoint, we need an account.\n    # Since resource ID is not provided, create a new account first.\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Create a user, login, get token, then create account with auth header since account creation likely requires an authenticated user.\n    # From PRD: User registration and login return JWT tokens for auth.\n    # We'll register a unique user, login, create account, then test balance endpoint.\n    session = requests.Session()\n\n    # Register user\n    username = f\"testuser_{uuid.uuid4().hex[:8]}\"\n    email = f\"{username}@example.com\"\n    password = \"TestPassword123!\"\n    full_name = \"Test User\"\n    phone = \"1234567890\"\n\n    register_payload = {\n        \"username\": username,\n        \"email\": email,\n        \"password\": password,\n        \"fullName\": full_name,\n        \"phone\": phone\n    }\n    try:\n        reg_resp = session.post(f\"{BASE_URL}/api/auth/register\", json=register_payload, headers=headers, timeout=TIMEOUT)\n        assert reg_resp.status_code == 200, f\"User registration failed: {reg_resp.status_code} {reg_resp.text}\"\n        reg_data = reg_resp.json()\n        assert reg_data.get(\"success\") is True, f\"User registration success flag false: {reg_data}\"\n        token = reg_data[\"data\"][\"token\"]\n        assert token, \"No token returned on registration\"\n    except Exception as e:\n        raise AssertionError(f\"User registration failed: {e}\")\n\n    # Set auth header for further requests\n    auth_headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {token}\"\n    }\n\n    # Create account\n    account_payload = {\n        \"accountType\": \"SAVINGS\",\n        \"currency\": \"USD\"\n    }\n    account_id = None\n    try:\n        create_acc_resp = session.post(f\"{BASE_URL}/api/accounts\", json=account_payload, headers=auth_headers, timeout=TIMEOUT)\n        assert create_acc_resp.status_code == 200, f\"Account creation failed: {create_acc_resp.status_code} {create_acc_resp.text}\"\n        acc_data = create_acc_resp.json()\n        assert acc_data.get(\"success\") is True, f\"Account creation success flag false: {acc_data}\"\n        acc_info = acc_data.get(\"data\")\n        assert acc_info and \"id\" in acc_info, f\"Account id not found in response: {acc_data}\"\n        account_id = acc_info[\"id\"]\n\n        # Now call the GET /api/accounts/{id}/balance endpoint\n        balance_resp = session.get(f\"{BASE_URL}/api/accounts/{account_id}/balance\", headers=auth_headers, timeout=TIMEOUT)\n        assert balance_resp.status_code == 200, f\"Balance retrieval failed: {balance_resp.status_code} {balance_resp.text}\"\n        balance_data = balance_resp.json()\n        assert balance_data.get(\"success\") is True, f\"Balance retrieval success flag false: {balance_data}\"\n        assert \"data\" in balance_data, f\"Balance data missing in response: {balance_data}\"\n        # The balance should be numeric (float or int)\n        balance_value = balance_data[\"data\"]\n        assert isinstance(balance_value, (int, float)), f\"Balance is not a number: {balance_value}\"\n\n        # Optionally, validate that the balance equals the balance reported in account creation response (likely 0 on new account)\n        assert abs(balance_value - acc_info.get(\"balance\", 0)) < 1e-6, f\"Balance mismatch: endpoint balance {balance_value}, account creation balance {acc_info.get('balance')}\"\n    finally:\n        # Cleanup: delete the created account and user if such endpoints existed\n        # PRD does not specify account deletion or user deletion endpoints, so skipping actual deletion.\n        # If in a real environment, add cleanup code here.\n        pass\n\ntest_get_account_balance_api()\n",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.181Z",
    "modified": "2025-10-01T09:29:37.001Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "f661603a-904f-446f-b76a-1993e5392414",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC008-test_get_account_statement_api",
    "description": "Verify that the endpoint /api/accounts/{id}/statement returns the correct transaction statement for the specified account ID with pagination details.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef register_user():\n    url = f\"{BASE_URL}/api/auth/register\"\n    unique_suffix = str(uuid.uuid4()).split('-')[0]\n    payload = {\n        \"username\": f\"testuser_{unique_suffix}\",\n        \"email\": f\"testuser_{unique_suffix}@example.com\",\n        \"password\": \"TestPassword123!\",\n        \"fullName\": \"Test User\",\n        \"phone\": \"1234567890\"\n    }\n    response = requests.post(url, json=payload, timeout=TIMEOUT)\n    response.raise_for_status()\n    data = response.json()\n    assert data.get(\"success\") is True\n    token = data.get(\"data\", {}).get(\"token\")\n    assert token is not None\n    return token\n\ndef create_account(token, account_type=\"SAVINGS\", currency=\"USD\"):\n    url = f\"{BASE_URL}/api/accounts\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    payload = {\n        \"accountType\": account_type,\n        \"currency\": currency\n    }\n    response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    response.raise_for_status()\n    data = response.json()\n    assert data.get(\"success\") is True\n    account_data = data.get(\"data\")\n    assert account_data is not None\n    account_id = account_data.get(\"id\")\n    assert isinstance(account_id, int)\n    return account_id\n\ndef delete_account(token, account_id):\n    # There is no delete api documented; ignoring deletion\n    # as no explicit delete endpoint given in PRD for accounts.\n    # If needed, could be implemented here.\n    pass\n\ndef test_get_account_statement_api():\n    token = None\n    account_id = None\n    headers = {}\n    try:\n        # Register a user and get token\n        token = register_user()\n        headers = {\"Authorization\": f\"Bearer {token}\"}\n        # Create a new account to test statement\n        account_id = create_account(token)\n        # Call the statement endpoint\n        url = f\"{BASE_URL}/api/accounts/{account_id}/statement\"\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        resp_json = response.json()\n        # Assert top level success & message\n        assert resp_json.get(\"success\") is True\n        assert \"message\" in resp_json\n        data = resp_json.get(\"data\")\n        assert isinstance(data, dict)\n        # Validate statement content list\n        content = data.get(\"content\")\n        assert isinstance(content, list)\n        for txn in content:\n            # Each transaction should have specified keys and types\n            assert isinstance(txn.get(\"id\"), str)\n            assert isinstance(txn.get(\"transactionId\"), str)\n            assert isinstance(txn.get(\"transactionType\"), str)\n            assert isinstance(txn.get(\"amount\"), (int, float))\n            assert isinstance(txn.get(\"fee\"), (int, float))\n            # description may be None or str\n            desc = txn.get(\"description\")\n            assert desc is None or isinstance(desc, str)\n            assert isinstance(txn.get(\"fromAccountNumber\"), (str, type(None)))\n            assert isinstance(txn.get(\"toAccountNumber\"), (str, type(None)))\n            assert isinstance(txn.get(\"status\"), str)\n            # createdAt should be str datetime format (basic check)\n            created_at = txn.get(\"createdAt\")\n            assert isinstance(created_at, str)\n        # Validate pagination keys and their types\n        assert isinstance(data.get(\"pageable\"), dict)\n        assert isinstance(data.get(\"totalElements\"), int)\n        assert isinstance(data.get(\"totalPages\"), int)\n        assert isinstance(data.get(\"size\"), int)\n        assert isinstance(data.get(\"number\"), int)\n        assert isinstance(data.get(\"first\"), bool)\n        assert isinstance(data.get(\"last\"), bool)\n        assert isinstance(data.get(\"empty\"), bool)\n    finally:\n        # No delete account API provided; so no cleanup possible\n        pass\n\ntest_get_account_statement_api()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.191Z",
    "modified": "2025-10-01T09:29:12.844Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "ec6abb64-b500-40c7-a75c-8031c922e8a9",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC009-test_update_account_status_api",
    "description": "Verify that the endpoint /api/accounts/{id}/status updates the account status correctly when provided with a valid status value.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_update_account_status_api():\n    # First, create an account to obtain a valid ID\n    create_account_url = f\"{BASE_URL}/api/accounts\"\n    headers = {'Content-Type': 'application/json'}\n    create_payload = {\n        \"accountType\": \"SAVINGS\",\n        \"currency\": \"USD\"\n    }\n    account_id = None\n    try:\n        create_resp = requests.post(create_account_url, json=create_payload, headers=headers, timeout=TIMEOUT)\n        assert create_resp.status_code == 200, f\"Account creation failed: {create_resp.text}\"\n        create_data = create_resp.json()\n        assert create_data.get(\"success\") is True, f\"Account creation response unsuccessful: {create_resp.text}\"\n        account = create_data.get(\"data\")\n        assert account and \"id\" in account, f\"Account ID missing in response: {create_resp.text}\"\n        account_id = account[\"id\"]\n\n        # Now update the account status\n        update_status_url = f\"{BASE_URL}/api/accounts/{account_id}/status\"\n        # Example valid status values might be \"ACTIVE\", \"FROZEN\", but not specified, so using \"FROZEN\"\n        valid_status = \"FROZEN\"\n        patch_headers = {'Content-Type': 'application/json'}\n        update_resp = requests.patch(update_status_url, json=valid_status, headers=patch_headers, timeout=TIMEOUT)\n        assert update_resp.status_code == 200, f\"Status update failed: {update_resp.text}\"\n\n        update_data = update_resp.json()\n        assert update_data.get(\"success\") is True, f\"Status update response unsuccessful: {update_resp.text}\"\n        assert update_data.get(\"data\") == valid_status, f\"Status not updated correctly. Expected {valid_status}, got {update_data.get('data')}\"\n\n        # Optionally, fetch the account to confirm status change\n        get_account_url = f\"{BASE_URL}/api/accounts/{account_id}\"\n        get_resp = requests.get(get_account_url, timeout=TIMEOUT)\n        assert get_resp.status_code == 200, f\"Failed to get account after status update: {get_resp.text}\"\n        get_data = get_resp.json()\n        assert get_data.get(\"success\") is True, f\"Get account response unsuccessful: {get_resp.text}\"\n        account_info = get_data.get(\"data\")\n        assert account_info.get(\"status\") == valid_status, f\"Account status not updated. Expected {valid_status}, got {account_info.get('status')}\"\n\n    finally:\n        # Clean up: delete the created account if deletion endpoint existed\n        # Since deletion is not described in PRD, skipping deletion step.\n\n        # If deletion were available, code would go here\n\n        pass\n\n\ntest_update_account_status_api()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 54, in <module>\n  File \"<string>\", line 17, in test_update_account_status_api\nAssertionError: Account creation failed: \n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.210Z",
    "modified": "2025-10-01T09:29:20.152Z"
  },
  {
    "projectId": "b3b44524-8a78-4bb7-8cc6-c84ab1ba96a2",
    "testId": "275114a2-5fdb-4d55-9d4c-28e1c5fae9d6",
    "userId": "f4b86468-3011-70b4-7326-a04a016f9c66",
    "title": "TC010-test_deposit_money_api",
    "description": "Verify that the deposit endpoint /api/transactions/deposit successfully deposits money into the specified account and returns the transaction details.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_deposit_money_api():\n    # Step 1: Register a new user\n    register_url = f\"{BASE_URL}/api/auth/register\"\n    unique_suffix = str(uuid.uuid4())[:8]\n    user_data = {\n        \"username\": f\"user_{unique_suffix}\",\n        \"email\": f\"user_{unique_suffix}@example.com\",\n        \"password\": \"StrongPassword!123\",\n        \"fullName\": \"Test User\",\n        \"phone\": \"1234567890\"\n    }\n    try:\n        register_resp = requests.post(register_url, json=user_data, timeout=TIMEOUT)\n        assert register_resp.status_code == 200, f\"User registration failed: {register_resp.text}\"\n        register_resp_json = register_resp.json()\n        assert register_resp_json.get(\"success\") is True, f\"User registration not successful: {register_resp.text}\"\n        token = register_resp_json[\"data\"][\"token\"]\n        assert token, \"No token received after registration\"\n\n        headers = {\n            \"Authorization\": f\"Bearer {token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n        # Step 2: Create a new bank account to deposit into\n        create_account_url = f\"{BASE_URL}/api/accounts\"\n        account_data = {\n            \"accountType\": \"SAVINGS\",\n            \"currency\": \"USD\"\n        }\n        create_acc_resp = requests.post(create_account_url, json=account_data, headers=headers, timeout=TIMEOUT)\n        assert create_acc_resp.status_code == 200, f\"Account creation failed: {create_acc_resp.text}\"\n        create_acc_json = create_acc_resp.json()\n        assert create_acc_json.get(\"success\") is True, f\"Account creation not successful: {create_acc_resp.text}\"\n        account_id = create_acc_json[\"data\"][\"id\"]\n\n        # Step 3: Deposit money into the created account\n        deposit_url = f\"{BASE_URL}/api/transactions/deposit\"\n        deposit_amount = 150.75\n        deposit_payload = {\n            \"accountId\": account_id,\n            \"amount\": deposit_amount\n        }\n        deposit_resp = requests.post(deposit_url, json=deposit_payload, headers=headers, timeout=TIMEOUT)\n        assert deposit_resp.status_code == 200, f\"Deposit request failed: {deposit_resp.text}\"\n        deposit_json = deposit_resp.json()\n        assert deposit_json.get(\"success\") is True, f\"Deposit not successful: {deposit_resp.text}\"\n        data = deposit_json.get(\"data\")\n        assert data is not None, \"Deposit response missing data\"\n        # Validate transaction details\n        assert data.get(\"transactionType\") == \"DEPOSIT\", \"Transaction type is not DEPOSIT\"\n        assert abs(data.get(\"amount\", 0) - deposit_amount) < 0.0001, \"Deposit amount mismatch\"\n        assert data.get(\"status\") in (\"COMPLETED\", \"SUCCESS\"), \"Unexpected transaction status\"\n        assert data.get(\"toAccountNumber\") is not None, \"toAccountNumber missing in transaction data\"\n        assert data.get(\"id\") is not None, \"Transaction ID missing\"\n        assert data.get(\"transactionId\") is not None, \"Transaction external ID missing\"\n        assert data.get(\"createdAt\") is not None, \"Transaction creation time missing\"\n    finally:\n        # Cleanup: Delete the created account and user if the API supported deletion\n        # Since no delete endpoints provided in PRD, skipping cleanup.\n        pass\n\ntest_deposit_money_api()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-01T09:28:03.225Z",
    "modified": "2025-10-01T09:29:19.443Z"
  }
]
